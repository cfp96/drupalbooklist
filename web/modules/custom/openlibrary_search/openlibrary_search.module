<?php

/**
 * @file
 * Implements hook_help().
 */

use Drupal\Component\Utility\Unicode;
use Drupal\Core\Database\Query\Condition;

/**
 * Implements hook_help().
 */
function openlibrary_search_help($route_name, $route_parameters) {
  switch ($route_name) {
    case 'help.page.openlibrary_search':
      return '<p>' . t('Provides integration with the Open Library API for book search.') . '</p>';
  }
}

/**
 * Implements hook_views_pre_view().
 */
function openlibrary_search_views_pre_view($view, $display_id, &$args) {
  // Verification of the id of the view and the display id in this case is a page.
  if ($view->id() === 'book_list' && $display_id === 'page_1') {
    $author = \Drupal::request()->query->get('field_author_value');
    $title = \Drupal::request()->query->get('title');

    // Instantiate the Open Library service.
    $openLibrarySearchService = \Drupal::service('openlibrary_search.search_service');

    // Fetch book data from the Open Library API service.
    $books = $openLibrarySearchService->createBookInDrupal($title, $author);

    // This condition is to show the infromation that already exist.
    if ($books == FALSE) {
      // This line is for optimization and actulization when a search was made.
      \Drupal::service('page_cache_kill_switch')->trigger();
      $entityTypeManager = \Drupal::entityTypeManager();
      $query = $entityTypeManager->getStorage('node')->getQuery()
      ->condition('type', 'book');

      // Get the title filter value.
      if (!empty($title)) {
        $titleConditionGroup = $query->orConditionGroup();
        $titleConditionGroup->condition('title', '%' . $title . '%', 'LIKE');
        $query->condition($titleConditionGroup);
      }

      // Get the author filter value.
      if (!empty($author)) {
        $authorConditionGroup = $query->orConditionGroup();
        $authorConditionGroup->condition('field_author', '%' . $author . '%', 'LIKE');
        $query->condition($authorConditionGroup);
      }

      // Get the existing book IDs.
      $existingBookIds = $query->execute();

      // Add the condition to show only the existing books when searching by both title and author.
      if (!empty($title) && !empty($author) && !empty($existingBookIds)) {
        $query->condition('nid', $existingBookIds, 'IN');
      }

      // Get the existing book IDs after applying additional conditions.
      $existingBookIds = $query->execute();

      // If there are existing book IDs, update the exposed filter.
      if (!empty($existingBookIds)) {
        $view->setExposedInput([
          'field_book_ids' => $existingBookIds,
        ]);
      }
    }

  }
}
